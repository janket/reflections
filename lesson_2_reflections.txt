diff -u 	comparing tow files which are not in the same repository

ls -a 		list all files (also hidden, e.g. .git) which are in the currend dicrectory

git init	initialize (or create) a new, empty Git repository
			git does not create any commmit when the repository is first created

git status	show all files whicht are untracked by Git at the moment

What happens when you initialize a repository? Why do you need to do it?
Git creates an empty, hidden map (.git), but does not create any commit for files. This need to be done manually

	better to store multiple files in a 'Staging area' to match them into one commit
git add		add files to the 'Staging area'

git commit				create a commit via the chosen standard editor
git commit -m "commit message"		create a commit without using an editor	

How is the staging area differnt from the working directory and the repository? What value do you think it offers?
The staging area collects a manual selection of the files which can be found in the working directory, but the files are
not sored in the repository yet. This helps to gain control over which files to add in one single commit.

_________________
				Compares
git diff			working directory	to	staging area
git diff --staged		staging area		to 	commit 1 	(most recent commit in repository)
git diff commit 1 commit 2	commit 1		to 	commit 2	(the second most recent commit)

git reset --hard	discard any changes in the working directory and the staging area 
	VERY CAREFULLY USE	cannot be undone

git checkout master		if git checkout is used to run a version of an old commit, 
				git checkout master will change back to the most recent version

How can you use the stagin area to make sure you have one commit per logical change?
use different "git diff" statements to ensure at which logical step you are
_________________
Use Branches		create multiple commits based on the same version

git branch			show current created branches
git branch "name of branch"	create a new branch
git checkout "name of branch"	change the branch you look in with Git

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?
It could be helpful when you like to make changes to the orignial verison without loosing this version.
For example changing the language of a code or if you like to develop two versions of the code parallel.
Branch every time you insert new, experimentalgit c features e.g.

git log -- graph --oneline "name of first branch" "name of second branch" (..".."..) 	show a visualization of all branches you like to see in one line

git checkout --b "new branch name"	if you checkout a single commit from history, create a new branch from this checkout with changes made

How do the diagrams help you visualize te branch structure?
It helps to understand, which commits are reachable from a certain branch and when they will show up in git log

__________________
Combining simple files		two versions from different branches with multiple changes in each

git merge
	error message "file needs merge
			error: you need to resolve your current index first
	solve
		git merge --abort	restore files to state before the merge
		use git diff to find differences between the last files used (correct spaces and tabs for example)
	
	git config --global core.autocrlf true		different systems (windows, linux, mac) use different code information about "Enter" new line features
							this code helps to solve "new line code" conflicts

git show "commit id"		comparing a commit to its parent

What is the result of merging two branches together?
The files of the two branches where checked on differences in code back to the state where they were splitted up.
Comparing these three files, Git can detect which lines are new and which are deletet, to merge the two branches correctly


